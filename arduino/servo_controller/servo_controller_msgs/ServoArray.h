// Generated by gencpp from file servo_controller/ServoArray.msg
// DO NOT EDIT!


#ifndef SERVO_CONTROLLER_MESSAGE_SERVOARRAY_H
#define SERVO_CONTROLLER_MESSAGE_SERVOARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace servo_controller
{
template <class ContainerAllocator>
struct ServoArray_
{
  typedef ServoArray_<ContainerAllocator> Type;

  ServoArray_()
    : angles()
    , enabled()
    , pwm_input_1(0)
    , pwm_input_2(0)  {
      angles.assign(0);

      enabled.assign(false);
  }
  ServoArray_(const ContainerAllocator& _alloc)
    : angles()
    , enabled()
    , pwm_input_1(0)
    , pwm_input_2(0)  {
  (void)_alloc;
      angles.assign(0);

      enabled.assign(false);
  }



   typedef boost::array<uint8_t, 16>  _angles_type;
  _angles_type angles;

   typedef boost::array<uint8_t, 16>  _enabled_type;
  _enabled_type enabled;

   typedef uint16_t _pwm_input_1_type;
  _pwm_input_1_type pwm_input_1;

   typedef uint16_t _pwm_input_2_type;
  _pwm_input_2_type pwm_input_2;





  typedef boost::shared_ptr< ::servo_controller::ServoArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::servo_controller::ServoArray_<ContainerAllocator> const> ConstPtr;

}; // struct ServoArray_

typedef ::servo_controller::ServoArray_<std::allocator<void> > ServoArray;

typedef boost::shared_ptr< ::servo_controller::ServoArray > ServoArrayPtr;
typedef boost::shared_ptr< ::servo_controller::ServoArray const> ServoArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::servo_controller::ServoArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::servo_controller::ServoArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::servo_controller::ServoArray_<ContainerAllocator1> & lhs, const ::servo_controller::ServoArray_<ContainerAllocator2> & rhs)
{
  return lhs.angles == rhs.angles &&
    lhs.enabled == rhs.enabled &&
    lhs.pwm_input_1 == rhs.pwm_input_1 &&
    lhs.pwm_input_2 == rhs.pwm_input_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::servo_controller::ServoArray_<ContainerAllocator1> & lhs, const ::servo_controller::ServoArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace servo_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::servo_controller::ServoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_controller::ServoArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_controller::ServoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_controller::ServoArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_controller::ServoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_controller::ServoArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::servo_controller::ServoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ad3b2e72d10fd4bc515732805358ab8";
  }

  static const char* value(const ::servo_controller::ServoArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ad3b2e72d10fd4bULL;
  static const uint64_t static_value2 = 0xc515732805358ab8ULL;
};

template<class ContainerAllocator>
struct DataType< ::servo_controller::ServoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "servo_controller/ServoArray";
  }

  static const char* value(const ::servo_controller::ServoArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::servo_controller::ServoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ServoArray.msg\n"
"# Author: Treggon Owens\n"
"# Description: Custom message for controlling 16 servos and reading 2 PWM inputs\n"
"\n"
"uint8[16] angles\n"
"bool[16] enabled\n"
"uint16 pwm_input_1\n"
"uint16 pwm_input_2\n"
;
  }

  static const char* value(const ::servo_controller::ServoArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::servo_controller::ServoArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angles);
      stream.next(m.enabled);
      stream.next(m.pwm_input_1);
      stream.next(m.pwm_input_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::servo_controller::ServoArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::servo_controller::ServoArray_<ContainerAllocator>& v)
  {
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "enabled[]" << std::endl;
    for (size_t i = 0; i < v.enabled.size(); ++i)
    {
      s << indent << "  enabled[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.enabled[i]);
    }
    s << indent << "pwm_input_1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_input_1);
    s << indent << "pwm_input_2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_input_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVO_CONTROLLER_MESSAGE_SERVOARRAY_H
